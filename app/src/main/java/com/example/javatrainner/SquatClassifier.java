package com.example.javatrainner;
import android.content.Context;
import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class SquatClassifier extends TechniqueClassifier{
    int neighborCount = 10;
    private knnWrapper[] binArray = new knnWrapper[this.neighborCount];
    private knnWrapper[] mulArray = new knnWrapper[this.neighborCount];
    private knnWrapper binaryClassifier;
    private knnWrapper multiClassifier;
    private final String[] multiClasses = {"butFirst", "core", "good", "headStraight",
            "liftingHeels", "noRep", "straightBack", "unEvenStance", "unEvenBearing"};
    private  final String[] binClass = {"bad","good"};
    private String TAG = "SquatClassifier";

    SquatClassifier(Context context){
        super(context);
        this.intiBinaryClassifier("binaryCFLDataNew.txt");
        this.intiMultiClassifier("MultiCFLDataNew.txt");
        double[][][] trimmedRep = {{{-5.0435156788406434,-39.680762966421,2.4677475248571197},{12.728670641698448,23.922224550044874,-35.088569294442955},{-21.427210603234812,23.02234974163308,-47.43862918863124},{4.206065709234547,27.74109481513547,27.841928163264832},{7.129545708930994,27.709228933750047,30.925431072433618},{16.934736350932994,51.66331936518034,-7.246641131178121},{-14.297664894303816,50.731578675383126,-16.513198116197625},{14.207788245740069,91.97756407340715,-6.685584759107373},{-1.4836854314296026,89.77885989999832,-22.00974953798261},{-62.32622370473819,-0.28211619475037253,9.336027361230428},{-59.40274370504174,-0.3139820761357939,12.419530270399214},},{{-6.464803082828299,-39.47412217010346,-0.801436675931007},{12.938718087216717,24.186993802401194,-48.14614597989304},{-22.045021177290216,23.2394855402436,-65.58186462909566},{4.083430343861455,28.343819523103576,40.369279646821155},{7.209174705237881,28.318286405721036,42.950877815940096},{17.022148431078172,52.530813325504774,-7.776866333071881},{-14.835846472052335,51.55777194596463,-22.63098681315557},{14.976512172324462,92.57918885829135,-3.4478261172588507},{0.13939595235797242,90.457640753385,-25.357153677106588},{-64.00076202628249,-0.43115507540965226,4.500414243068583},{-60.87501766490605,-0.45668819279219264,7.0820124121875185},},{{-7.1934725269418305,-39.34785830263361,-21.996851201041657},{13.084455217122075,21.890465342660804,-104.69621568824618},{-23.63611010668972,21.05727117204856,-95.7200574215715},{4.4139078637495786,29.16574135629238,71.69502433510539},{7.788401691874483,29.00647635758986,71.63121354702292},{17.498363080871655,51.05620669895318,-33.0011913531408},{-15.847708414815235,50.06374752963842,-24.088843874548566},{16.2367561836276,90.62237572757964,-5.219063818357192},{-0.1991564636875225,89.1932951062792,-7.877269007248855},{-66.96232322036798,-0.21030200498432805,32.04129784862276},{-63.58782939224307,-0.36956700368684636,31.977487060540305},},{{-8.359129842682234,-39.11681158112428,-53.00824773893183},{12.976480262646394,19.062251498295492,-126.23951975486486},{-25.91386082560532,19.233477051007927,-110.07689551734505},{4.736600594751746,30.192857754554677,82.99738955452904},{8.484848064500468,29.11491151656119,82.47951932743779},{17.71308085739814,49.25510925285017,-43.24213020033583},{-17.42901276110485,48.34838856756912,-27.59737618990727},{17.00533435736541,89.53863213278359,14.020885056752384},{-0.0030065757076513933,86.29848884988425,21.156104030868164},{-70.02519526150844,0.6947819749954718,40.17181757539093},{-66.27694779175971,-0.3831642629980152,39.65394734829968},},{{-11.093601906530637,-38.430872963535705,-78.18495928262381},{9.012429260096674,11.775223649847353,-192.92419938563933},{-29.724861436855022,12.582395767816545,-153.68213596220153},{6.66384891453373,31.645081422760676,108.77187367999595},{10.30006514320393,29.67223977110679,93.16451317177724},{15.676278174630404,43.42030507260803,-84.15232570564339},{-19.42479629365109,42.25463553892333,-60.51762279042428},{18.126802504635002,83.32364852386473,-4.4155701793254},{0.31188318940558446,79.21303801473805,16.115540248505347},{-71.56556760976571,2.0418067644281024,66.94985407447541},{-67.9293513810955,0.06896511277421524,51.34249356625671},},{{-11.90538428109765,-38.18719451752632,-86.14968142814477},{9.452295182907811,8.617060570243838,-198.99343981236828},{-32.09310958617186,9.957675114393426,-175.94767893456438},{6.966808072007101,33.1309092260131,129.09302736308612},{11.185518108219235,29.90065410528905,120.66068633220127},{16.419103254914912,41.74796979625694,-69.90041244928214},{-20.907591477952625,39.858329219682474,-55.28699260236313},{18.981158446853478,80.37865490024618,18.77840983986154},{0.34112189230410905,77.60203315074588,28.33354796478273},{-75.31368781333056,3.0797655676432605,46.30289861388951},{-71.09497777711843,-0.1504895530807886,37.87055758300465},},{{-12.24520627651713,-38.07958670003583,-94.01310204235924},{9.2355990996126,4.709738187260826,-184.21194646047783},{-33.95428473396481,7.177233092765753,-154.05201304653656},{7.136965303710763,32.892748590728644,115.62696681816607},{11.707206326587965,29.929507053609118,103.185114665533},{16.372564403323363,37.602486777989476,-68.58497964231177},{-22.24707840737685,37.10674014637487,-50.866898381003544},{18.75157376573825,75.30088325195263,30.30364198005981},{-0.13567521675747685,75.56751707248337,38.27068408134336},{-77.4777610269771,3.4329408501074408,54.17451446851251},{-72.9075200040999,0.46969931298791323,41.73266231587945},},{{-11.949681570440898,-38.17335602701269,-59.915728241161716},{7.993121583251277,-4.293057240574204,-181.57551405224774},{-36.49084157065747,-2.1758456298807998,-151.31352018715722},{8.316720157826989,32.242114225908466,96.08791646908153},{13.250893684298966,29.770641992418692,92.97471180924512},{16.309841741078266,27.94905698533426,-85.4875975831662},{-23.239947886358507,27.594796362537892,-58.3388083779121},{18.910888713673366,65.12156735378628,-21.183633503560145},{-1.941631718071811,66.76899804811123,-2.8113159751947308},{-79.14861275883135,3.0755959300842903,55.453574677395295},{-74.21443923235938,0.6041236965945203,52.340370017558875},},{{-11.523429154169504,-38.3041848957635,-81.00844199259552},{8.26893289096338,-7.217502969378257,-194.19524608242716},{-37.475998540640575,-5.792291305587023,-156.66613597648993},{8.398288442492735,32.45343640018634,105.42061384232589},{13.379806954052917,30.38200173262728,100.237634012196},{16.667221333456116,25.235933430808082,-88.77463224010128},{-24.09619158658766,24.58971042704026,-56.42850196429393},{18.773899188616515,62.80978892405932,3.6890643458792596},{-3.156011133409052,63.62422472531601,13.124685434916579},{-79.92120495161672,2.676165344442534,65.69317115856526},{-74.93968644005653,0.6047306768834773,60.51019132843536},},{{-10.65057563908784,-38.556001329962484,-64.30414578136352},{12.050157886194786,-12.188240295856302,-191.7463017624705},{-37.45592394824304,-9.74067129542019,-145.43556301915555},{5.380818931577885,33.539516211768735,110.85034389340672},{13.530938796863936,30.446931674479323,96.42942874904503},{17.43097681777267,21.351275915912435,-80.89595786906379},{-23.9249851513791,20.70626037905913,-49.00613427011052},{18.318727208910637,58.953227475714314,-10.65202169832888},{-3.511584264341387,60.21631147918222,9.358221121881613},{-82.6562587814523,3.7046250490902857,74.36332838022227},{-74.50613891616624,0.612040511800874,59.94241323586058},},{{-9.521310664933031,-38.850284982504725,-93.0527994992869},{18.75406264791329,-16.10007218772746,-191.17298758627936},{-40.01621211223376,-14.418626584755755,-127.78771512862059},{0.5730093388288964,34.433517757604875,114.81757345908268},{13.780181047321058,32.45584745098925,95.06441311509035},{19.327071986742187,18.333445569877412,-76.3554141271967},{-26.236031064912698,18.037220866233497,-32.72330201353023},{17.650533668956182,57.06588265727024,30.787920516313704},{-5.5168714172606315,57.00535374385012,46.238962341533195},{-92.09834703337202,2.123634109757326,96.43890523658328},{-78.89117532487987,0.14596380314170432,76.68574489259095},},{{-9.585984644870557,-38.834377790667716,-26.923204875013315},{20.036640092527847,-14.46728566046909,-132.21011522551737},{-41.718012987377094,-15.17163840935608,-100.10376655105844},{0.955837171115725,34.700076216066996,79.45142244138057},{14.14969413645531,33.91604184537996,73.37004197848405},{20.992477263643572,20.232790555597905,-52.7586927841368},{-27.568318850921784,18.74440343602388,-26.73372457257438},{18.220500826128557,59.14770569427763,-23.168521463327004},{-5.624373123665656,57.498243878679595,-2.477486143357547},{-96.0681842545628,0.37029525102622074,63.27134221798403},{-82.8743272892232,-0.4137391196608142,57.18996175508751},},{{-7.525086036142717,-39.28578725377219,-9.966632113590837},{20.903337490692568,-12.413683885935036,-162.25449051892213},{-40.38039659145856,-12.553111194672546,-116.03733898958373},{0.3547261655295486,33.87364598257618,77.80658742220834},{13.787646420556776,33.18989236124549,68.45981449604625},{21.258063656222117,21.459962096641142,-84.44790309671379},{-26.592750170901784,20.63678116657294,-47.57752449353748},{16.06470255103254,59.50719050081396,-68.93305168725067},{-6.349216993426772,61.1611272699445,-43.15911167581892},{-93.92448052935336,0.5660888686872134,71.94725536310736},{-80.49156027432613,-0.1176647526434742,62.60048243694527},},{{-6.414119791946275,-39.482389331125376,-39.73724859581649},{14.991420964808752,-7.158346719518328,-200.48835767613002},{-38.6150676297298,-9.228212236962591,-171.56466496346374},{5.2217883879966,31.77445984201372,97.84289117326028},{13.18744482544978,31.460179213778257,82.9846857284964},{20.21320935280535,24.61611312249539,-102.64546650286974},{-25.42762280428002,22.231966976815666,-88.57997923496734},{14.510908434042637,63.04285737317515,-60.29964765138551},{-6.897082301624756,62.770001388386646,-51.45130089481859},{-84.81075334437475,-0.0022499806338114325,54.55416377097683},{-76.84509690692157,-0.31653060886927165,39.695958326212946},},{{-7.266518284234396,-39.334434177001796,-160.58577236735442},{10.502231167156324,8.450765421008384,-246.63545237072387},{-38.681097358333645,6.465098048471772,-217.99000971452742},{7.710010527707599,30.67343693767803,157.68814229670193},{13.500720562347553,31.095877985987578,141.47929464615333},{18.212241694863923,39.12420235868641,-88.94731007402191},{-25.18037679598609,37.56097603445935,-76.5107150683741},{14.183660881690084,77.78412493362649,81.61780710821078},{-6.618759414343458,77.56992181352288,74.09571248410205},{-81.96298903438742,-0.5622605324297867,64.01885140630446},{-76.17227899974748,-0.13981948412023826,47.81000375575585},},{{-6.091882118289961,-39.53339059904753,-73.09805148520722},{5.597570323763083,15.8512340664556,-175.5126485670694},{-35.856938593543006,13.977044304995117,-160.52073916512305},{10.235442312687422,28.582817533214396,86.05463338779634},{12.059049883030724,29.45984557510141,83.41936588979124},{15.833012636450505,44.43405159966999,-89.45801517927305},{-23.797888710512282,43.43688988009653,-77.10137327533181},{11.88565416304208,82.82974409723215,2.7874503262007266},{-7.6667660005239355,84.10797858062942,-23.15073581039114},{-73.70008317002716,-0.31513180272174246,50.8792339244055},{-71.87647559968386,0.5618962391652715,48.24396642640039},},{{-5.368266336782407,-39.63813462484541,-85.41823032011277},{3.438733787634595,19.769688739033644,-166.14490509877473},{-33.70388260692977,18.070568592708245,-148.72105409403795},{11.89154908332442,28.564368729023464,100.52123317100586},{10.39868839396047,28.90252519992046,85.53172993924431},{15.330282870959016,48.33405746805711,-65.62367192776887},{-23.305194212969297,46.9730937926287,-63.18932415479363},{10.226808051299852,87.17621660935521,27.23277387836987},{-7.4651867197453186,87.40720390102142,14.790690679293164},{-68.8465025932677,-0.4758404453793119,52.33947936723342},{-70.33936328263167,-0.1376839744823144,37.34997613547188},},{{-5.306323035500077,-39.64647444405267,-14.813539797415899},{-0.2404536883205317,24.327571309782794,-101.1190215379858},{-30.36078328554515,21.969838289091207,-96.24748278067742},{13.66091203150378,27.313391831359187,72.52226146877175},{8.026993952541233,28.37042823596233,65.25551567309833},{13.420458343183249,51.64096314114198,-28.596760069214064},{-22.333789333003917,50.340266525053536,-30.991967107579086},{9.86336479214043,92.06004436488104,-9.756376409471969},{-8.164049710960946,89.21413418941982,-20.20527117248938},{-59.80312875312585,-1.766765824559048,50.25575224376833},{-65.4370468320884,-0.7097294199559059,42.98900644809492},},{{-3.3281917406271777,-39.861298771334845,10.235974451986898},{2.3405132142689666,27.328680122604485,-23.34624836272528},{-25.449061229803657,24.867564396102814,-47.360630286756354},{11.746442810214052,25.371867299178966,41.28164878711675},{5.893040062497867,27.027921593203803,43.953518285603806},{14.086956024483019,52.700547421783455,17.935400424391474},{-19.55602116730579,51.895485989306614,-3.4071120011525444},{8.929670613251705,92.28204420334055,6.993038029615596},{-7.742352274820121,92.03658675041922,-12.936698510350464},{-53.88814535413492,-2.5802227363722103,9.443986879970215},{-59.74154810185111,-0.9241684423473728,12.11585637845727},},{{-2.1427623773860756,-39.94256588395466,5.889221947399333},{3.624485014636571,27.193788522489267,-16.404404206212234},{-22.645359350407013,24.729981666523944,-36.774769407019946},{10.32083042917617,24.182236486363422,38.18321382373185},{4.467945643105079,26.27682877200968,41.46542444660283},{13.94531544381274,51.376025008852686,21.77880961751961},{-18.17741370730193,51.00681043853363,4.690655039582889},{8.056688347136234,91.668694847002,18.208100917658253},{-8.003261855853275,90.59927236829364,-3.517080155354421},{-49.886126755330565,-2.7630446649539664,8.110984873570192},{-55.73901154140166,-0.6684523793077091,11.39319549644118}}};
        for (int i = 0; i < this.neighborCount; i++){
            Log.i(this.TAG, "Binary classifier: " + i + " " + this.binArray[i].predict(trimmedRep));
            Log.i(this.TAG, "Multi classifier: " + i + " " + this.mulArray[i].predict(trimmedRep));
        }
    }

    String getClassification(double[][][] capturedMotion){
        double[][][] trimmedRep = this.trimRepSize(capturedMotion);
        if (trimmedRep == null) {
            return "slowDown";
        }
        for (int i = 0; i < trimmedRep.length; i++){
            trimmedRep[i] = pe.embeddedLandmarks(trimmedRep[i]);
        }
        //int bin = binaryClassifier.predict(trimmedRep);
        for (int i = 0; i < this.neighborCount; i++){
            Log.i(this.TAG, "Binary classifier: " + i + " " + this.binArray[i].predict(trimmedRep));
        }
        //int multi = multiClassifier.predict(trimmedRep);
        for (int i = 0; i < this.neighborCount; i++){
            Log.i(this.TAG, "Binary classifier: " + i + " " + this.mulArray[i].predict(trimmedRep));
        }
        //Log.i(this.TAG, "MultiClass classifier: " + multi);
       // if (0 != 0) {
            //int multi = multiClassifier.predict(trimmedRep);
            // return this.multiClasses[multi];
       // } else {
         //   return "good";
        //}
        return "Fuck off";
    }

    static public int[] create1DIntArrayFromFile(String lines, int size) throws IOException {
        int[] output = new int[size];
        int i = 0;
        for (String s : lines.split(",")) {
            if (s.isEmpty()){continue;}
            output[i] = Integer.parseInt(s.replace(" ", ""));
            i++;
        }
        return output;
    }

    static public double[][] create2DDoubleMatrixFromFile(String data, int size) throws IOException {
        double[][] output = new double[size][660];
        String[] dataS = data.split(",");
        int k = 0;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < 660; j++) {
                if (dataS[k].isEmpty()) {
                    k++;
                    j--;
                    continue;
                }
                output[i][j] = Double.parseDouble(dataS[k].replace(" ", ""));
                k++;
            }
        }
        return output;
    }

    private String editData(String data){
        data = data.replace("{", "");
        data = data.replace("}", "");
        data = data.replace(" ", "");
        return data;
    }

    private void intiBinaryClassifier(String fileName) {
        ArrayList<String> output = getDataPoints(fileName);
        String y = output.get(1);
        String x = output.get(0);

        x = editData(x);
        y = editData(y);
        int size = y.split(",").length;
        try {
            int[] yData = create1DIntArrayFromFile(y, size);
            double[][] xData = create2DDoubleMatrixFromFile(x, size);
            for (int i = 0; i < this.neighborCount; i++){
                this.binArray[i] = new knnWrapper(i + 1, 2, xData, yData);
            }
        }
        catch (IOException e)  {
            e.printStackTrace();
        }
    }

    private void intiMultiClassifier(String fileName){
        ArrayList<String> output = getDataPoints(fileName);
        String y = output.get(1);
        String x = output.get(0);

        x = editData(x);
        y = editData(y);
        int size = y.split(",").length;
        try {
            int[] yData = create1DIntArrayFromFile(y, size);
            double[][] xData = create2DDoubleMatrixFromFile(x, size);
            for (int i = 0; i < this.neighborCount; i++){
                this.mulArray[i] = new knnWrapper(i + 1, this.multiClasses.length, xData, yData);
            }
        }
        catch (IOException e)  {
            e.printStackTrace();
        }
    }

    private ArrayList<String> getDataPoints(String fileName){
        ArrayList<String> output = new ArrayList<String>();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(
                    new InputStreamReader(this.context.getAssets().open(fileName), "UTF-8"));
            String mLine;
            while ((mLine = reader.readLine()) != null) {
                output.add(mLine);
            }
            return output;
        } catch (IOException e) {
            Log.e(this.TAG, "Error, something went wrong while reading points for kNNN");
            return null;
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                }
            }
        }
    }

    protected double[][][] trimRepSize(double[][][] rep){
        List<double[][]> newRep = new ArrayList<>();
        int repLength = rep.length;
        if (repLength == trimSize) {
            return rep;
        } else if (repLength < trimSize){
            return null;
        }
        double minS = -1.0;
        int minI = -1;
        for (int i = 0; i < repLength; i++){
            if (minS == -1.0 && minI == -1.0) {
                minS = rep[i][0][1];  // Nose Y position
                minI = i;
            } else if (rep[i][0][1] > minS) { // Y axis starts at the top of the frame
                minS = rep[i][0][1];  // Nose Y position
                minI = i;
            }
        }
        int midSize = (int) Math.ceil((float) this.trimSize / 2);
        if (midSize > minI){
            minI = midSize;
        }
        if (midSize > repLength - minI) {
            minI = repLength - midSize - 1;
        }
        int goingDown = minI;
        int goingUp = repLength - minI;
        double downInterval = goingDown / ((double) trimSize / 2);
        double upInterval = goingUp / ((double) trimSize / 2);
        double j = 0;
        while (newRep.size() < trimSize && Math.floor(j) < repLength) {
            int idx = (int) Math.floor(j);
            if (newRep.size() < midSize) {
                newRep.add(rep[idx]);
                j += downInterval;
            } else {
                newRep.add(rep[idx]);
                j += upInterval;
            }
        }
        Log.i(this.TAG, "Trimmed rep to size " + newRep.size());
        return (newRep.toArray(new double[3][newRep.get(0).length][newRep.size()])) ;
    }
}

